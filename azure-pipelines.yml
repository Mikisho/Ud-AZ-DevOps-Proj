name: Azure Pipelines
variables:
  python.version: '3.9.1'
  # System.Debug: true
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDUg6shPh0uK0miagxmeUZAfWXNy8pLtsaJP7y8IiKJ4IR1nddifOO0hol4pj+zviUarKYaNTA4Fw6x12lHR1UBYutQ+fJlZsaiU2UwOAX+sMHYiMFhaozSRYtMYUZnHDVHplLnv5zIJSLMHiAEF8Xn1RDDQAjxFHOi1SoLlsXUZ6TCOz5mZWePn9M1XvYCqCkQPpjcg41JMaYDp/cliAdDRNPIkQfP42A3y+yEvkB5PDeSL46RXLuz1SOY/R1SgCyT17bS4CTlB4NANxntUtKTZMwPRC8N/rFqmmtpQaaDbqa8sbUX3PRPtZiWeepHiOgVoiRnG+NKy/qx1R3KjcJ7RcOYER1q8eAUR/wsz7V33MKhpOlLjIEkJYWbgMjX7celtVMrnUrYMvvm58NKZ2Kiuvv4os1ucKb2uhTuPxYdXwvx1fgbtk2NCps+76v6z5HJi/PFYDd2P4t60pXlD9nDLPdC9QHC7VT7j1IQqBjKusXnHDTqM6IaRaVblfRzzgM= akuget@outlook.com
        '
        sshKeySecureFile: 'mykey'
    - task: TerraformInstaller@0
      displayName: 'Use Terraform latest'
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    # - task: CmdLine@2
    #   displayName: Install newman package command
    #   inputs:
    #     script: 'sudo npm install -g newman'
    #     WorkingDirectory : $(System.DefaultWorkingDirectory)
    # - task: CmdLine@2
    #   condition: succeededOrFailed()
    #   displayName: Run newman command
    #   inputs:
    #     script: 'newman run automatedtesting/postman/UdProj3Dev.postman_collection.json -e automatedtesting/postman/DevEnv.postman_environment.json --delay-request 12000 --reporters cli,junit --reporter-junit-export Results\junitReport.xml'
    #     WorkingDirectory : $(System.DefaultWorkingDirectory)
    # - task: PublishTestResults@2
    #   condition: succeededOrFailed()
    #   inputs:
    #     testResultsFormat: 'JUnit'
    #     testResultsFiles: 'Results\junitReport.xml'
    #     failTaskOnFailedTests: false
    #     testRunTitle: 'Integration Tests'
  - job: Terraform
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '1.0.0'
    - task: DownloadSecureFile@1
      displayName: 'Download secure file $(terraform.tfvars)'
      inputs:
        secureFile: 'terraform.tfvars'
    - task: TerraformTaskV2@2
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'Ud-az-service'
        backendAzureRmResourceGroupName: 'udp3-tstate-rg'
        backendAzureRmStorageAccountName: 'udp3tfstate'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'key1'
        workingDirectory: 'terraform'
    - task: TerraformTaskV2@2
      displayName: Terraform validate and apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: '-var-file="$(Agent.TempDirectory)/terraform.tfvars'
        environmentServiceNameAzureRM: 'Ud-az-service'
        workingDirectory: 'terraform'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      continueOnError: true
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    - task: CopyFiles@2
      displayName: 'Copy python scripts for later use in the pipeline'
      inputs:
        contents: 'automatedtesting/selenium/**'
        targetFolder: '$(Build.StagingDirectory)'
    - publish: '$(Build.ArtifactStagingDirectory)/automatedtesting/selenium'
      displayName: 'Publish python scripts for later use'
      artifact: dropScripts

- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: VMDeploy
    displayName: Install packages for testing
    environment:
      name:  DEV
      resourceType: VirtualMachine
      tags: web
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropScripts
          - task: CopyFiles@2
            displayName: Copy login script to Temp folder
            inputs:
              SourceFolder: '$(Pipeline.Workspace)/dropScripts'
              Contents: '**'
              TargetFolder: '$(Agent.TempDirectory)'
              OverWrite: true
          - task: Bash@3
            displayName: Install Python, chromium and Run Selenium Tests
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get update -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                pip3 install webdriver-manager
                sudo pip3 install -U selenium
                # wget https://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip
                # unzip chromedriver_linux64.zip
                # rm -rf *.zip
                # rm -rf *.zip.
                # sudo mv -f ~/chromedriver /usr/local/bin/chromedriver
                # sudo chown root:root /usr/local/bin/chromedriver
                # sudo chmod 0755 /usr/local/bin/chromedriver
                chromedriver --version
          - task: CmdLine@2
            condition: succeededOrFailed()
            displayName: Run Selenium Tests
            inputs:
              script: |
                sudo mkdir -p /var/logs/seleniumlogfile.txt
                sudo chmod 775 /var/logs/seleniumlogfile.txt
                python3 $(Agent.TempDirectory)/login.py 2>&1 | sudo tee -a /var/logs/seleniumlogfile.txt
                cd $(Pipeline.Workspace)
                mkdir -p logs/selenium
                pwd
                cat seleniumlog.txt
                ls -la
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Pipeline.Workspace)/seleniumlog.txt'
              artifact: 'Seleniumlog'
              publishLocation: 'pipeline'
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'DEV'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure Web App'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Ud-az-service'
              appType: 'webAppLinux'
              WebAppName: 'dev-az-app-proj3'
              deployToSlotOrASE: true
              ResourceGroupName: 'udp3-tstate-rg'
              SlotName: 'production'
              packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Write your commands here
                  
                echo 'FakeRestAPI Running'
  - job: Jmeter
    dependsOn: FakeRestAPI
    pool:
        vmImage: 'ubuntu-latest'
    steps:
    - task: JMeterInstaller@0
      displayName: 'Install JMeter 5.2.1'
      inputs:
        jmeterVersion: '5.2.1'
    - task: Bash@3
      displayName: 'Run Jmeter Stress test'
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n -t automatedtesting/jmeter/Starter.jmx -JCsvPath=automatedtesting/jmeter/Users.csv -JStressTestUsers=30 -JEnduranceTestUsers=0
    - task: Bash@3
      displayName: 'Run Jmeter Endurance test'
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n -t automatedtesting/jmeter/Starter.jmx -JCsvPath=automatedtesting/jmeter/Users.csv -JStressTestUsers=0 -JEnduranceTestUsers=30
          