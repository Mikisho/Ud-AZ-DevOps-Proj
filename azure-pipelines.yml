name: Azure Pipelines
variables:
  python.version: '3.9.1'
  # System.Debug: true
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDUg6shPh0uK0miagxmeUZAfWXNy8pLtsaJP7y8IiKJ4IR1nddifOO0hol4pj+zviUarKYaNTA4Fw6x12lHR1UBYutQ+fJlZsaiU2UwOAX+sMHYiMFhaozSRYtMYUZnHDVHplLnv5zIJSLMHiAEF8Xn1RDDQAjxFHOi1SoLlsXUZ6TCOz5mZWePn9M1XvYCqCkQPpjcg41JMaYDp/cliAdDRNPIkQfP42A3y+yEvkB5PDeSL46RXLuz1SOY/R1SgCyT17bS4CTlB4NANxntUtKTZMwPRC8N/rFqmmtpQaaDbqa8sbUX3PRPtZiWeepHiOgVoiRnG+NKy/qx1R3KjcJ7RcOYER1q8eAUR/wsz7V33MKhpOlLjIEkJYWbgMjX7celtVMrnUrYMvvm58NKZ2Kiuvv4os1ucKb2uhTuPxYdXwvx1fgbtk2NCps+76v6z5HJi/PFYDd2P4t60pXlD9nDLPdC9QHC7VT7j1IQqBjKusXnHDTqM6IaRaVblfRzzgM= akuget@outlook.com
        '
        sshKeySecureFile: 'mykey'
    - task: TerraformInstaller@0
      displayName: 'Use Terraform latest'
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    - task: CmdLine@2
      displayName: Install newman package command
      inputs:
        script: 'sudo npm install -g newman'
        WorkingDirectory : $(System.DefaultWorkingDirectory)
    # - task: CmdLine@2
    #   condition: succeededOrFailed()
    #   displayName: Run newman Regression Test
    #   inputs:
    #     script: 'newman run automatedtesting/postman/UdProj3DevRegression.postman_collection.json -e automatedtesting/postman/DevEnv.postman_environment.json --delay-request 12000 --reporters cli,junit --reporter-junit-export Results\junitReport.xml'
    #     WorkingDirectory : $(System.DefaultWorkingDirectory)
    # - task: CmdLine@2
    #   condition: succeededOrFailed()
    #   displayName: Run newman Validation Test
    #   inputs:
    #       script: 'newman run automatedtesting/postman/UdProj3DevValidation.postman_collection.json -e automatedtesting/postman/DevEnv.postman_environment.json --delay-request 12000 --reporters cli,junit --reporter-junit-export Results\junitReport.xml'
    #       WorkingDirectory : $(System.DefaultWorkingDirectory)
    # - task: PublishTestResults@2
    #   condition: succeededOrFailed()
    #   inputs:
    #     testResultsFormat: 'JUnit'
    #     testResultsFiles: 'Results\junitReport.xml'
    #     failTaskOnFailedTests: false
    #     testRunTitle: 'Integration Tests'
  - job: Terraform
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '1.0.0'
    - task: DownloadSecureFile@1
      displayName: 'Download secure file $(terraform.tfvars)'
      inputs:
        secureFile: 'terraform.tfvars'
    - task: TerraformTaskV2@2
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'Ud-az-service'
        backendAzureRmResourceGroupName: 'udp3-tstate-rg'
        backendAzureRmStorageAccountName: 'udp3tfstate'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'key1'
        workingDirectory: 'terraform'
    - task: TerraformTaskV2@2
      displayName: Terraform Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-var-file="$(Agent.TempDirectory)/terraform.tfvars'
        environmentServiceNameAzureRM: 'Ud-az-service'
        workingDirectory: 'terraform'
    - task: TerraformTaskV2@2
      displayName: Terraform validate and apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: '-var-file="$(Agent.TempDirectory)/terraform.tfvars'
        environmentServiceNameAzureRM: 'Ud-az-service'
        workingDirectory: 'terraform'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      continueOnError: true
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    - task: CopyFiles@2
      displayName: 'Copy python scripts for later use in the pipeline'
      inputs:
        contents: 'automatedtesting/selenium/**'
        targetFolder: '$(Build.StagingDirectory)'
    - publish: '$(Build.ArtifactStagingDirectory)/automatedtesting/selenium'
      displayName: 'Publish python scripts for later use'
      artifact: dropScripts

- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: VMDeploy
    displayName: Install packages for testing
    environment:
      name:  Ud-Proj3Dev
      resourceType: VirtualMachine
      tags: web
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: Install Python, chromium and Run Selenium Tests
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get update -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                pip3 install webdriver-manager
                sudo pip3 install -U selenium
                sudo rm -rf ~/*.zip
                wget -N https://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip -P ~/
                unzip ~/chromedriver_linux64.zip -d ~/
                rm -rf ~/chromedriver_linux64.zip
                rm -rf ~/*.zip
                sudo mv -f ~/chromedriver /usr/local/bin/chromedriver
                sudo chown root:root /usr/local/bin/chromedriver
                sudo chmod 0755 /usr/local/bin/chromedriver
                chromedriver --version
                sudo mkdir -p /var/logs/
                sudo chmod 775 /var/logs/
          - task: CmdLine@2
            condition: succeededOrFailed()
            displayName: Run Selenium Tests
            inputs:
              script: | 
                python3 $(Pipeline.Workspace)/dropScripts/login.py
                sudo cp $(Pipeline.Workspace)/dropScripts/selenium-test.log /var/logs/selenium-test.log 
                sudo chmod 775 /var/logs/selenium-test.log
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'Ud-Proj3Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Ud-az-service'
              appType: 'webApp'
              appName: 'dev-az-app-proj3'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'

  - job: Jmeter
    dependsOn: FakeRestAPI
    pool:
        vmImage: 'ubuntu-latest'
    steps:
    - task: JMeterInstaller@0
      displayName: 'Install JMeter 5.2.1'
      inputs:
        jmeterVersion: '5.2.1'
    - task: Bash@3
      displayName: 'Run Jmeter Stress test'
      inputs:
        targetType: 'inline'
        script: |
          sudo mkdir stresstest-html-report
          ls -la
          rm -rf *.csv stress-test-html-report/*
          jmeter -n -t automatedtesting/jmeter/Stresstest.jmx \ 
          -l StrtestRes.csv -e -f -o strtst-html-report/

          ls -la
    - task: Bash@3
      displayName: 'Run Jmeter Endurance test'
      inputs:
        targetType: 'inline'
        script: |
          sudo mkdir endurancetest-html-report
          ls -la
          rm -rf *.csv endurancetest-html-report/*
          jmeter -n -t automatedtesting/jmeter/Endurancetest.jmx \ 
          l EndurTestRes.csv -e -f -o endutst-html-report/

          ls -la
